// Generated by purs bundle 0.13.6
var PS = {};
(function(exports) {
  const videoSubscribers = new Set();
  const audioSubscribers = new Set();
  let setFlashLightTimeout = false;
  let pendingFlashLight = false;
  let pendingFacingMode = 'environment';
  let videoTrack;
  let audioTrack;

  function setFlashLight() {
	  videoTrack.applyConstraints({
		  advanced: [{ torch: pendingFlashLight }]
	  }).catch(e => {
		  if (e.message !== 'Unsupported constraint(s)') {
			  console.error(e);
		  }
	  });
  }

  function captureVideo() {
	  if (videoTrack) {
		  videoTrack.stop();
	  }

	  videoTrack = null;

	  if (setFlashLightTimeout !== null) {
		  clearTimeout(setFlashLightTimeout);
		  setFlashLightTimeout = null;
	  }

	  const facingMode = pendingFacingMode;

	  navigator.mediaDevices.getUserMedia({ video: { facingMode } })
		  .then(stream => {
			  const streamTracks = stream.getTracks();

			  if (facingMode !== pendingFacingMode) {
				  streamTracks.forEach(track => {
					  track.stop();
				  });

				  captureVideo();
				  return;
			  }

			  if (streamTracks.length !== 1 || streamTracks[0].kind !== 'video') {
				  throw new Error('Unexpected track(s)');
			  }

			  setFlashLightTimeout = setTimeout(() => {
				  setFlashLight();
				  setFlashLightTimeout = null;
			  }, 500);

			  [videoTrack] = streamTracks;
			  videoSubscribers.forEach(({ subscriber }) => {
				  try {
					  subscriber(videoTrack)();
				  } catch (e) {
					  console.error(e);
				  }
			  });
		  });
  }

  function captureAudio() {
	  if (audioTrack) {
		  audioTrack.stop();
	  }

	  audioTrack = null;

	  navigator.mediaDevices.getUserMedia({ audio: true })
		  .then(stream => {
			  const streamTracks = stream.getTracks();
			  if (streamTracks.length !== 1 || streamTracks[0].kind !== 'audio') {
				  throw new Error('Unexpected track(s)');
			  }
			  [audioTrack] = streamTracks;
			  audioSubscribers.forEach(({ subscriber }) => {
				  try {
					  subscriber(audioTrack)();
				  } catch (e) {
					  console.error(e);
				  }
			  });
		  });
  } 

  exports.subscribeAudio = subscriber => () => {
	  const subscriberObject = { subscriber };
	  videoSubscribers.add(subscriberObject);

	  if (audioTrack === undefined) {
		  captureAudio();
	  } else if (videoTrack !== null) {
		  Promise.resolve().then(() => {
			  if (audioTrack && audioSubscribers.has(subscriberObject)) {
				  subscriber(audioTrack)();
			  }
		  });
	  }

	  return () => {
		  audioSubscribers.delete(subscriberObject);
	  };
  };
})(PS["Capture"] = PS["Capture"] || {});
(function($PS) {
  "use strict";
  $PS["Capture"] = $PS["Capture"] || {};
  var exports = $PS["Capture"];
  var $foreign = $PS["Capture"];
  exports["subscribeAudio"] = $foreign.subscribeAudio;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];                    
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["join"] = join;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  function id(x) {
    return x;
  }                        
  exports.fromNumber = id;
  exports.fromObject = id;

  function isArray(a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  }
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  exports["fromNumber"] = $foreign.fromNumber;
  exports["fromObject"] = $foreign.fromObject;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];                
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  exports["Left"] = Left;
  exports["Right"] = Right;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq; 
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqString"] = eqString;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  exports["ff"] = ff;
  exports["disj"] = disj;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];                      
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                          var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                          return function ($98) {
                              return $96(f($97($98)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["alaF"] = alaF;
  exports["newtypeDisj"] = newtypeDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $205 = Data_Eq.eq(dictEq);
          return function ($206) {
              return $204($205($206));
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["elem"] = elem;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  }; 
  var foldWithIndexM = function (dictFoldableWithIndex) {
      return function (dictMonad) {
          return function (f) {
              return function (a0) {
                  return foldlWithIndex(dictFoldableWithIndex)(function (i) {
                      return function (ma) {
                          return function (b) {
                              return Control_Bind.bind(dictMonad.Bind1())(ma)(Data_Function.flip(f(i))(b));
                          };
                      };
                  })(Control_Applicative.pure(dictMonad.Applicative0())(a0));
              };
          };
      };
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldWithIndexM"] = foldWithIndexM;
})(PS);
(function(exports) {
  "use strict";

  exports.mkFn2 = function (fn) {
    /* jshint maxparams: 2 */
    return function (a, b) {
      return fn(a)(b);
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["mkFn2"] = $foreign.mkFn2;
})(PS);
(function(exports) {
  "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                         
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 69, column 30): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 127, column 28): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["isJust"] = isJust;
  exports["fromJust"] = fromJust;
  exports["bindMaybe"] = bindMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];            
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];             
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  exports["Unfoldable1"] = Unfoldable1;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);                 
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              var $202 = Data_Semigroup.append(dictMonoid.Semigroup0())(acc);
              return function ($203) {
                  return $202(f($203));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          var $204 = Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b);
          return function ($205) {
              return $204(rev($205));
          };
      };
  });
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 133, column 22 - line 135, column 61): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 140, column 22 - line 142, column 52): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 157, column 48): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["semigroupList"] = semigroupList;
  exports["foldableList"] = foldableList;
  exports["unfoldableList"] = unfoldableList;
  exports["applicativeList"] = applicativeList;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordStringImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
  exports["ordString"] = ordString;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                         
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  exports["Tuple"] = Tuple;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 612, column 1 - line 612, column 40): " + [ v.constructor.name ]);
  };
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var empty = Leaf.value;
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  var asList = Control_Category.identity(Control_Category.categoryFn);
  var foldableWithIndexMap = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableMap;
  }, function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(Data_Tuple.uncurry(f))(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)((function () {
                  var $763 = Data_Function.flip(f);
                  return function ($764) {
                      return Data_Tuple.uncurry($763($764));
                  };
              })())(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(Data_Tuple.uncurry(f))(z)(asList(toUnfoldable(Data_List_Types.unfoldableList)(m)));
          };
      };
  });
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
  exports["member"] = member;
  exports["foldableWithIndexMap"] = foldableWithIndexMap;
})(PS);
(function(exports) {
  "use strict";          

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];                                   
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];
  var member = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.member(dictOrd)(a)(v);
          };
      };
  };
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  }; 
  var empty = Data_Map_Internal.empty;
  var $$delete = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal["delete"](dictOrd)(a)(v);
          };
      };
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["member"] = member;
  exports["delete"] = $$delete;
})(PS);
(function(exports) {
  "use strict";

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };
  var showNumber = new Show($foreign.showNumberImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["show"] = show;
  exports["showNumber"] = showNumber;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.warn = function (s) {
    return function () {
      console.warn(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["warn"] = $foreign.warn;
})(PS);
(function(exports) {
    

  exports.promiseToEffectImpl = function (promise, onFulfilled, onRejected) {
    return function () {
      return promise.then(function (a) {
        return onFulfilled(a)();
      }, function (err) {
        return onRejected(err)();
      });
    };
  };

  exports.promiseImpl = function (callback) {
    return new Promise(function(resolve, reject) {
      callback(function (a) {
        return function () {
          resolve(a);
        };
      }, function (err) {
        return function () {
          reject(err);
        };
      })();
    });
  };
})(PS["Effect.Promise"] = PS["Effect.Promise"] || {});
(function(exports) {
  exports.undefer = function (f) {
    return f();
  };
})(PS["Effect.Promise.Unsafe"] = PS["Effect.Promise.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Promise.Unsafe"] = $PS["Effect.Promise.Unsafe"] || {};
  var exports = $PS["Effect.Promise.Unsafe"];
  var $foreign = $PS["Effect.Promise.Unsafe"];
  exports["undefer"] = $foreign.undefer;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Promise"] = $PS["Effect.Promise"] || {};
  var exports = $PS["Effect.Promise"];
  var $foreign = $PS["Effect.Promise"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Effect_Promise_Unsafe = $PS["Effect.Promise.Unsafe"];                
  var runPromise = function (onSucc) {
      return function (onErr) {
          return function (p) {
              return $foreign.promiseToEffectImpl(Effect_Promise_Unsafe.undefer(function (dictDeferred) {
                  return p();
              }), onSucc, onErr);
          };
      };
  };
  var promise = function (dictDeferred) {
      return function (k) {
          return $foreign.promiseImpl(Data_Function_Uncurried.mkFn2(k));
      };
  };
  exports["promise"] = promise;
  exports["runPromise"] = runPromise;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  /* global exports */
  "use strict";

  exports.setTimeout = function (ms) {
    return function (fn) {
      return function () {
        return setTimeout(fn, ms);
      };
    };
  };

  exports.clearTimeout = function (id) {
    return function () {
      clearTimeout(id);
    };
  };
})(PS["Effect.Timer"] = PS["Effect.Timer"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Effect.Timer"] = $PS["Effect.Timer"] || {};
  var exports = $PS["Effect.Timer"];
  var $foreign = $PS["Effect.Timer"];
  exports["setTimeout"] = $foreign.setTimeout;
  exports["clearTimeout"] = $foreign.clearTimeout;
})(PS);
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports.all = function (f) {
    return function (m) {
      for (var k in m) {
        if (hasOwnProperty.call(m, k) && !f(k)(m[k])) return false;
      }
      return true;
    };
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (k) {
    return function (m) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["poke"] = $foreign.poke;
  exports["delete"] = $foreign["delete"];
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Data_Functor = $PS["Data.Functor"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];              
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var s = thawST(m)();
              f(s)();
              return s;
          });
      };
  };
  var isEmpty = $foreign.all(function (v) {
      return function (v1) {
          return false;
      };
  });
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var functorObject = new Data_Functor.Functor(function (f) {
      return function (m) {
          return $foreign["_fmapObject"](m, f);
      };
  });
  var $$delete = function (k) {
      return mutate(Foreign_Object_ST["delete"](k));
  };
  exports["isEmpty"] = isEmpty;
  exports["insert"] = insert;
  exports["delete"] = $$delete;
  exports["functorObject"] = functorObject;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Gamepad"] = $PS["Gamepad"] || {};
  var exports = $PS["Gamepad"];
  var LeftAxisH = (function () {
      function LeftAxisH() {

      };
      LeftAxisH.value = new LeftAxisH();
      return LeftAxisH;
  })();
  var LeftAxisV = (function () {
      function LeftAxisV() {

      };
      LeftAxisV.value = new LeftAxisV();
      return LeftAxisV;
  })();
  exports["LeftAxisH"] = LeftAxisH;
  exports["LeftAxisV"] = LeftAxisV;
})(PS);
(function(exports) {
  "use strict";            

  exports.atan2 = function (y) {
    return function (x) {
      return Math.atan2(y, x);
    };
  };                       

  exports.cos = Math.cos;    

  exports.sin = Math.sin;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["atan2"] = $foreign.atan2;
  exports["cos"] = $foreign.cos;
  exports["sin"] = $foreign.sin;
})(PS);
(function(exports) {
  function createPeer(
	  {
		  createDataChannel,
		  addVideoTransceiver,
		  addAudioTransceiver,
		  subscribeVideoTrack,
		  subscribeAudioTrack,
		  subscribeClose
	  },
	  setPlaybackVideo,
	  setPlaybackAudio,
	  subscribeVideo,
	  subscribeAudio
  ) {
	  const requestSubscribers = new Set();
	  const messageSubscribers = new Set();
	  let pendingSendVideo = false;
	  let pendingSendAudio = false;

	  const audioTransceiver = addAudioTransceiver(null, { direction: 'sendonly' });
	  const videoTransceiver = addVideoTransceiver(null, { direction: 'sendonly' });

	  subscribeVideoTrack(setPlaybackVideo);
	  subscribeAudioTrack(setPlaybackAudio);
	  subscribeClose(() => {
		  requestSubscribers.clear();
		  messageSubscribers.clear();
	  });

	  const controlChannel = createDataChannel('control', { id: 0, negotiated: true });

	  controlChannel.onmessage = ({ data }) => {
		  const message = JSON.parse(data);
		  if ('request' in message) {
			  let sent = false;
			  requestSubscribers.forEach(({ subscriber }) => {
				  subscriber(message.data, data => {
					  if (!sent) {
						  sent = true;
						  controlChannel.send(JSON.stringify({ response: message.request, data }));
					  }
				  });
			  });
		  } else if (!('response' in message)) {
			  messageSubscribers.forEach(({ subscriber }) => {
				  subscriber(message.data);
			  });
		  }
	  };

	  return {
		  setSendVideo(sendVideo) {
			  pendingSendVideo = sendVideo;
			  if (videoTransceiver.sender.track) {
				  videoTransceiver.sender.track.stop();
			  }
			  videoTransceiver.sender.replaceTrack(null);
			  if (sendVideo) {
				  subscribeVideo(track => {
					  if (pendingSendVideo) {
						  videoTransceiver.sender.replaceTrack(track);
					  } else {
						  track.stop();
					  }
				  });
			  }
		  },
		  setSendAudio(sendAudio) {
			  pendingSendAudio = sendAudio;
			  if (audioTransceiver.sender.track) {
				  audioTransceiver.sender.track.stop();
			  }
			  audioTransceiver.sender.replaceTrack(null);
			  if (sendAudio) {
				  subscribeAudio(track => {
					  if (pendingSendAudio) {
						  audioTransceiver.sender.replaceTrack(track);
					  } else {
						  track.stop();
					  }
				  });
			  }
		  },
		  sendMessage(data) {
			  if (controlChannel.readyState === 'open') {
				  controlChannel.send(JSON.stringify({ data }));
			  } else {
				  console.warn('Control channel is not open');
			  }
		  },
		  subscribeMessage(subscriber) {
			  const subscriberObject = { subscriber };
			  messageSubscribers.add(subscriberObject);
			  return () => {
				  messageSubscribers.delete(subscriberObject);
			  };
		  },
		  sendRequest(data) {
			  if (controlChannel.readyState !== 'open') {
				  return Promise.reject(new Error('Control channel is not open'));
			  }
			  const transaction = Math.random().toString(36).substr(2, 9);
			  controlChannel.send(JSON.stringify({ request: transaction, data }));
			  return new Promise(resolve => {
				  controlChannel.addEventListener('message', function onmessage({ data }) {
					  const message = JSON.parse(data);
					  if (message.response === transaction) {
						  controlChannel.removeEventListener('message', onmessage);
						  resolve(message.data);
					  }
				  });
			  });
		  },
		  subscribeRequest(subscriber) {
			  const subscriberObject = { subscriber };
			  requestSubscribers.add(subscriberObject);
			  return () => {
				  requestSubscribers.delete(subscriberObject);
			  };
		  }
	  };
  }

  // eslint-disable-next-line max-len
  exports.createPeer = pc => setPlaybackVideo => setPlaybackAudio => subscribeVideo => subscribeAudio => () => {
	  return createPeer(
		  pc,
		  track => { setPlaybackVideo(track)(); },
		  track => { setPlaybackAudio(track)(); },
		  subscriber => subscribeVideo(track => () => subscriber(track))(),
		  subscriber => subscribeAudio(track => () => subscriber(track))()
	  );
  };                                                                             
  exports.setSendAudio = peer => sendAudio => () => peer.setSendAudio(sendAudio);
  exports.sendMessage = peer => data => () => peer.sendMessage(data);
  exports.subscribeRequest = peer => subscriber => peer.subscribeRequest(
	  (data, respond) => subscriber(data)(data => () => respond(data))()
  );
})(PS["Peer"] = PS["Peer"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Peer"] = $PS["Peer"] || {};
  var exports = $PS["Peer"];
  var $foreign = $PS["Peer"];
  exports["createPeer"] = $foreign.createPeer;
  exports["setSendAudio"] = $foreign.setSendAudio;
  exports["sendMessage"] = $foreign.sendMessage;
  exports["subscribeRequest"] = $foreign.subscribeRequest;
})(PS);
(function(exports) {
  function createPeerConnection(offer, sendSdp, sendIce, subscribeSdp, subscribeIce) {
	  // This function looks disasterous because Chromiums's implementation of WebRTC is disaster
	  // More information: https://bugs.chromium.org/p/chromium/issues/detail?id=980872 and issues it's being blocked on

	  const videoTrackSubscribers = new Set();
	  const audioTrackSubscribers = new Set();
	  const closeSubscribers = new Set();
	  let offerIndex = offer ? 1 : 0; // debug only
	  let negotiating = false;
	  let ignoring = null; // latest incoming offer being ignored
	  let needsNegotiation = null;
	  let answerSet = false;

	  const pc = new RTCPeerConnection({
		  iceServers: [{
			  urls: ['turns:turn.keijo.ee:3478'],
			  username: 'immutable_bricks',
			  credential: 'BEtwbSeUbApfjqj9'
		  }]
	  });

	  pc.addEventListener('connectionstatechange', () => {
		  console.log('Connection state: %s', pc.connectionState);
		  if (pc.connectionState === 'failed') {
			  pc.close();
		  }

		  if (pc.connectionState === 'closed') {
			  unsubscribeSdp();
			  unsubscribeIce();
			  videoTrackSubscribers.clear();
			  audioTrackSubscribers.clear();
			  closeSubscribers.clear();
		  }
	  });

	  pc.addEventListener('signalingstatechange', () => {
		  console.log('Signaling state: %s', pc.signalingState);
	  });

	  pc.addEventListener('iceconnectionstatechange', () => {
		  console.log('ICE connection state: %s', pc.iceConnectionState);
	  });

	  pc.addEventListener('track', ({ track }) => {
		  console.log('Got %s track', track.kind);
		  track.addEventListener('ended', () => {
			  console.log('%s track has been ended', track.kind);
		  });

		  if (track.kind === 'video') {
			  videoTrackSubscribers.forEach(({ subscriber }) => {
				  subscriber(track.clone());
			  });
		  }

		  if (track.kind === 'audio') {
			  audioTrackSubscribers.forEach(({ subscriber }) => {
				  subscriber(track.clone());
			  });
		  }

		  track.stop();
	  });

	  pc.addEventListener('icecandidate', ({ candidate }) => {
		  if (candidate) {
			  const {
				  component, address, port, priority, relatedAddress, relatedPort, type, protocol
			  } = candidate;
			  console.log('ICE candidate: (%s %s) %s %s %s:%s %s:%s', component, priority, type, protocol, address, port, relatedAddress, relatedPort);
			  sendIce(candidate);
		  }
	  });

	  pc.addEventListener('negotiationneeded', () => {
		  const sdpId = offerIndex;
		  offerIndex += 2;
		  if (needsNegotiation !== null) {
			  console.warn('[%s] [%s] Cancelling', sdpId, pc.signalingState);
		  } else if (negotiating) {
			  console.warn('[%s] [%s] Deferring', sdpId, pc.signalingState);
			  needsNegotiation = sdpId;
		  } else {
			  negotiate(sdpId);
		  }
	  });

	  function negotiate(sdpId) {
		  negotiating = true;
		  answerSet = false;
		  console.log('[%s] [%s] Setting local description', sdpId, pc.signalingState);
		  pc.setLocalDescription()
			  .then(() => {
				  const offer = pc.localDescription;
				  console.assert(offer.type === 'offer', 'Unexpected offer type %s', offer.type);
				  console.assert(pc.signalingState === 'have-local-offer', 'Unexpected signaling state %s', pc.signalingState);
				  console.log('[%s] [%s] Local %s has been set', sdpId, pc.signalingState, offer.type);
				  offer.sdpId = sdpId;
				  sendSdp(offer);
			  })
			  .catch(e => {
				  console.error(e);
				  pc.close();
			  });
	  }

	  function handleRemoteOffer(offer, sdpId) {
		  console.assert(offer.type === 'offer', 'Unexpected offer type %s', offer.type);
		  if (offer && negotiating) {
			  ignoring = sdpId;
			  console.warn('[%s] [%s] Ignoring remote %s', sdpId, pc.signalingState, offer.type);
		  } else {
			  ignoring = null;
			  console.log('[%s] [%s] Setting remote %s', sdpId, pc.signalingState, offer.type);
			  const needsRollback = negotiating && !answerSet;
			  negotiating = true;
			  answerSet = false;
			  const promise = needsRollback
				  ? Promise.all([pc.setLocalDescription({ type: 'rollback' }), pc.setRemoteDescription(offer)])
				  : pc.setRemoteDescription(offer);
			  promise.
				   then(() => {
					  console.log('[%s] [%s] Remote %s has been set', sdpId, pc.signalingState, offer.type);
					  answerSet = true;
					  return pc.setLocalDescription();
				  })
				  .then(() => {
					  const answer = pc.localDescription;
					  console.assert(pc.signalingState === 'stable');
					  console.assert(answer.type === 'answer');
					  console.log('[%s] [%s] Local %s has been set', sdpId, pc.signalingState, answer.type);
					  answer.sdpId = sdpId;
					  if (needsNegotiation !== null) {
						  negotiate(needsNegotiation);
						  needsNegotiation = null;
					  } else {
						  negotiating = false;
					  }
				  })
				  .catch(e => {
					  console.error(e);
					  pc.close();
				  });
		  }
	  }

	  function handleRemoteAnswer(answer, sdpId) {
		  console.assert(answer.type === 'answer', 'Unexpected answer type %s', answer.type);
		  console.assert(pc.signalingState === 'have-local-offer', 'Unexpected signaling state %s', pc.signalingState);
		  console.assert(negotiating);
		  ignoring = null;
		  console.log('[%s] [%s] Setting remote %s', sdpId, pc.signalingState, answer.type);
		  answerSet = true;
		  pc.setRemoteDescription(answer)
			  .then(() => {
				  console.log('[%s] [%s] Remote %s has been set', sdpId, pc.signalingState, answer.type);
				  if (pc.signalingState === 'stable') {
					  if (needsNegotiation !== null) {
						  negotiate(needsNegotiation);
						  needsNegotiation = null;
					  } else {
						  negotiating = false;
					  }
				  } else {
					  console.warn('Signaling state is %s after setting remote answer', pc.signalingState);
					  pc.addEventListener('signalingstatechange', function onsignalingstatechange() {
						  pc.removeEventListener('signalingstatechange', onsignalingstatechange);
						  if (pc.signalingState === 'stable') {
							  if (needsNegotiation !== null) {
								  negotiate(needsNegotiation);
								  needsNegotiation = null;
							  } else {
								  negotiating = false;
							  }
						  } else {
							  console.error(`Unexpected state ${pc.signalingState}`);
							  pc.close();
						  }
					  });
				  }
			  })
			  .catch(e => {
				  console.error(e);
				  pc.close();
			  });
	  }

	  const unsubscribeSdp = subscribeSdp(sdp => {
		  switch (sdp.type) {
		  case 'offer': handleRemoteOffer(sdp, sdp.sdpId); break;
		  case 'answer': handleRemoteAnswer(sdp, sdp.sdpId); break;
		  default: console.error('Unexpected remote SDP type %s', sdp.type);
		  }
	  })();

	  const unsubscribeIce = subscribeIce(ice => {
		  if (ignoring !== null) {
			  console.warn('[%s] Ignoring ICE candidate', ignoring);
		  } else {
			  console.log('[%s] Adding ICE candidate', pc.signalingState);
			  pc.addIceCandidate(ice).catch(console.error);
		  }
	  })();

	  if (offer) {
		  console.log('[%s] [%s] Have remote %s', 0, pc.signalingState, offer.type);
		  handleRemoteOffer(offer, 0);
	  }

	  return {
		  addVideoTransceiver(track, options) {
			  console.log('Adding video track');
			  return pc.addTransceiver(track || 'video', options);
		  },

		  addAudioTransceiver(track, options) {
			  console.log('Adding audio track');
			  return pc.addTransceiver(track || 'audio', options);
		  },

		  subscribeVideoTrack(subscriber) {
			  const subscriberObject = { subscriber };
			  videoTrackSubscribers.add(subscriberObject);
			  return () => {
				  videoTrackSubscribers.delete(subscriberObject);
			  };
		  },

		  subscribeAudioTrack(subscriber) {
			  const subscriberObject = { subscriber };
			  audioTrackSubscribers.add(subscriberObject);
			  return () => {
				  audioTrackSubscribers.delete(subscriberObject);
			  };
		  },

		  subscribeClose(subscriber) {
			  const subscriberObject = { subscriber };
			  closeSubscribers.add(subscriberObject);
			  return () => {
				  closeSubscribers.delete(subscriberObject);
			  };
		  },

		  createDataChannel(label, options) {
			  console.log('Creating data channel: %s', label);
			  const channel = pc.createDataChannel(label, options);
			  channel.addEventListener('open', () => {
				  console.log('Data channel %s is open', channel.label);
			  });
			  channel.addEventListener('closing', () => {
				  console.log('Data channel %s is closing', channel.label);
			  });
			  channel.addEventListener('close', () => {
				  console.log('Data channel %s is closed', channel.label);
			  });
			  return channel;
		  }
	  };
  }

  // eslint-disable-next-line max-len
  exports.createPeerConnection = offer => sendSdp => sendIce => subscribeSdp => subscribeIce => {
	  return createPeerConnection(
		  offer.value0,
		  sdp => sendSdp(sdp)(),
		  ice => sendIce(ice)(),
		  subscriber => subscribeSdp(sdp => () => subscriber(sdp))(),
		  subscriber => subscribeIce(ice => () => subscriber(ice))()
	  );
  };
})(PS["PeerConnection"] = PS["PeerConnection"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["PeerConnection"] = $PS["PeerConnection"] || {};
  var exports = $PS["PeerConnection"];
  var $foreign = $PS["PeerConnection"];
  exports["createPeerConnection"] = $foreign.createPeerConnection;
})(PS);
(function(exports) {
  const tankVideo = document.getElementById('tankVideo');

  const stream = new MediaStream();
  tankVideo.srcObject = stream;

  exports.setPlaybackVideo = track => () => {
	  console.assert(!track || track.kind === 'video');

	  stream.getVideoTracks().forEach(track => {
		  stream.removeTrack(track);
	  });

	  if (track) {
		  stream.addTrack(track);
	  }
  };

  exports.setPlaybackAudio = track => () => {
	  console.assert(!track || track.kind === 'audio');

	  stream.getAudioTracks().forEach(track => {
		  stream.removeTrack(track);
	  });

	  if (track) {
		  stream.addTrack(track);
	  }
  };
})(PS["Playback"] = PS["Playback"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Playback"] = $PS["Playback"] || {};
  var exports = $PS["Playback"];
  var $foreign = $PS["Playback"];
  exports["setPlaybackAudio"] = $foreign.setPlaybackAudio;
  exports["setPlaybackVideo"] = $foreign.setPlaybackVideo;
})(PS);
(function(exports) {
  exports.setPointerCapture = pointerId => element => () => {
	  element.setPointerCapture(pointerId);
  };
})(PS["PointerEvents"] = PS["PointerEvents"] || {});
(function($PS) {
  "use strict";
  $PS["PointerEvents"] = $PS["PointerEvents"] || {};
  var exports = $PS["PointerEvents"];
  var $foreign = $PS["PointerEvents"];
  exports["setPointerCapture"] = $foreign.setPointerCapture;
})(PS);
(function(exports) {
  const peerSubscribers = new Set();
  const sdpSubscribers = new Set();
  const iceSubscribers = new Set();

  let client = null;
  let closeTimeout = null;
  let reconnectTimeout = null;

  function create() {
	  clearTimeout(reconnectTimeout);
	  reconnectTimeout = null;

	  const ws = new WebSocket(window.location.href.replace(/^http/, 'ws'));

	  const timeout = setTimeout(() => {
		  console.error('Server connection initialization timeout');
		  ws.close();
	  }, 8000);

	  ws.onopen = () => {
		  console.log('Server connection open');
		  clearTimeout(timeout);
		  client = ws;
	  };

	  ws.onclose = function () {
		  console.error('Server connection closed');
		  client = null;
		  clearTimeout(timeout);
		  if (!reconnectTimeout) {
			  reconnectTimeout = setTimeout(create, 2000);
		  }
	  };

	  ws.onmessage = ({ data }) => {
		  clearTimeout(closeTimeout);
		  closeTimeout = setTimeout(() => {
			  console.error('Didn\'t receive ping');
			  ws.close();
		  }, 32000);

		  if (data === 'ping') {
			  ws.send('pong');
			  return;
		  }

		  const message = JSON.parse(data);

		  if (typeof message.source !== 'string') {
			  console.warn('Received message without source');
		  }

		  if ('type' in message) {
			  peerSubscribers.forEach(({
				  peerType,
				  peerId,
				  knownPeers,
				  subscriber
			  }) => {
				  if (!('destination' in message)) {
					  client.send(JSON.stringify({
						  source: peerId.value0,
						  destination: message.source,
						  type: peerType
					  }));
				  }

				  if (!knownPeers.has(peerId) && (!('destination' in message) || message.destination === peerId)) {
					  try {
						  subscriber(message.type, message.source);
					  } catch (e) {
						  console.error(e);
					  }
				  }
			  });
		  }

		  if (typeof message.destination === 'string') {
			  sdpSubscribers.forEach(({ localPeer, remotePeer, subscriber }) => {
				  if (message.destination === localPeer && message.source === remotePeer && 'sdp' in message) {
					  try {
						  subscriber(message.sdp);
					  } catch (e) {
						  console.error(e);
					  }
				  }
			  });

			  iceSubscribers.forEach(({ localPeer, remotePeer, subscriber }) => {
				  if (message.destination === localPeer && message.source === remotePeer && 'ice' in message) {
					  try {
						  subscriber(message.ice);
					  } catch (e) {
						  console.error(e);
					  }
				  }
			  });
		  }
	  };
  }

  create();

  // eslint-disable-next-line max-len
  exports.subscribePeerImpl = operatorConstructor => tankConstructor => peerIdConstructor => peerType => peerId => subscriber => () => {
	  const subscriberWrap = {
		  peerType: peerType.constructor.name === 'Tank' ? 'tank' : 'operator',
		  peerId: peerId.value0,
		  knownPeers: new Set(),
		  subscriber: (peerType, peerId) => subscriber(peerType === 'tank' ? tankConstructor : operatorConstructor, peerIdConstructor(peerId))
	  };

	  peerSubscribers.add(subscriberWrap);
	  return () => {
		  peerSubscribers.delete(subscriberWrap);
	  };
  };

  exports.subscribeSdpImpl = sdpConstructor => remotePeer => localPeer => subscriber => () => {
	  const subscriberWrap = {
		  localPeer: localPeer.value0,
		  remotePeer: remotePeer.value0,
		  subscriber: sdp => subscriber(sdpConstructor(sdp))
	  };

	  sdpSubscribers.add(subscriberWrap);
	  return () => {
		  sdpSubscribers.delete(subscriberWrap);
	  };
  };

  exports.subscribeIceImpl = iceConstructor => remotePeer => localPeer => subscriber => () => {
	  const subscriberWrap = {
		  localPeer: localPeer.value0,
		  remotePeer: remotePeer.value0,
		  subscriber: ice => subscriber(iceConstructor(ice))
	  };

	  iceSubscribers.add(subscriberWrap);
	  return () => {
		  iceSubscribers.delete(subscriberWrap);
	  };
  };

  exports.sendSdp = source => destination => sdp => () => {
	  if (!client) {
		  console.warn('Server connection is not active');
		  return;
	  }

	  client.send(JSON.stringify({
		  source: source.value0,
		  destination: destination.value0,
		  sdp: sdp.value0
	  }));
  };

  exports.sendIce = source => destination => ice => () => {
	  if (!client) {
		  console.warn('Server connection is not active');
		  return;
	  }

	  client.send(JSON.stringify({
		  source: source.value0,
		  destination: destination.value0,
		  ice: ice.value0
	  }));
  };

  exports.peerIdImpl = peerIdConstructor => type => {
	  const key = `peer-id-${type}`;
	  let peerId = localStorage.getItem(key);

	  if (!peerId) {
		  peerId = `${Math.random().toString(36).substr(2, 9)}`;
		  localStorage.setItem(key, peerId);
	  }

	  return peerIdConstructor(peerId);
  };
})(PS["Signaling"] = PS["Signaling"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Signaling"] = $PS["Signaling"] || {};
  var exports = $PS["Signaling"];
  var $foreign = $PS["Signaling"];       
  var Tank = (function () {
      function Tank() {

      };
      Tank.value = new Tank();
      return Tank;
  })();
  var Operator = (function () {
      function Operator() {

      };
      Operator.value = new Operator();
      return Operator;
  })();
  var PeerId = function (x) {
      return x;
  };
  var subscribeSdp = $foreign.subscribeSdpImpl(PeerId);
  var subscribePeer = $foreign.subscribePeerImpl(Operator.value)(Tank.value)(PeerId);
  var subscribeIce = $foreign.subscribeIceImpl(PeerId);
  var peerId = $foreign.peerIdImpl(PeerId);
  exports["Operator"] = Operator;
  exports["Tank"] = Tank;
  exports["peerId"] = peerId;
  exports["subscribeSdp"] = subscribeSdp;
  exports["subscribeIce"] = subscribeIce;
  exports["subscribePeer"] = subscribePeer;
  exports["sendSdp"] = $foreign.sendSdp;
  exports["sendIce"] = $foreign.sendIce;
})(PS);
(function(exports) {
  exports.nextTick = callback => {
	  Promise.resolve().then(callback);
  };
})(PS["Util"] = PS["Util"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Util"] = $PS["Util"] || {};
  var exports = $PS["Util"];
  var $foreign = $PS["Util"];
  exports["nextTick"] = $foreign.nextTick;
})(PS);
(function(exports) {
  "use strict";

  exports.setAttribute = function (name) {
    return function (value) {
      return function (element) {
        return function () {
          element.setAttribute(name, value);
          return {};
        };
      };
    };
  };
})(PS["Web.DOM.Element"] = PS["Web.DOM.Element"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var $foreign = $PS["Web.DOM.Element"];
  exports["setAttribute"] = $foreign.setAttribute;
})(PS);
(function(exports) {
  "use strict";                                               

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["Web.DOM.ParentNode"] = PS["Web.DOM.ParentNode"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.DOM.ParentNode"] = $PS["Web.DOM.ParentNode"] || {};
  var exports = $PS["Web.DOM.ParentNode"];
  var $foreign = $PS["Web.DOM.ParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var querySelector = function (qs) {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $4 = $foreign["_querySelector"](qs);
      return function ($5) {
          return $3($4($5));
      };
  };
  exports["querySelector"] = querySelector;
})(PS);
(function(exports) {
  "use strict";

  exports.preventDefault = function (e) {
    return function () {
      return e.preventDefault();
    };
  };
})(PS["Web.Event.Event"] = PS["Web.Event.Event"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.Event.Event"] = $PS["Web.Event.Event"] || {};
  var exports = $PS["Web.Event.Event"];
  var $foreign = $PS["Web.Event.Event"];
  exports["preventDefault"] = $foreign.preventDefault;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            return target.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
})(PS);
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                      
  var toParentNode = Unsafe_Coerce.unsafeCoerce;
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["toParentNode"] = toParentNode;
  exports["toEventTarget"] = toEventTarget;
})(PS);
(function(exports) {
  "use strict";

  exports._read = function (nothing, just, value) {
    var tag = Object.prototype.toString.call(value);
    if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
      return just(value);
    } else {
      return nothing;
    }
  };

  // - CSSOM ---------------------------------------------------------------------

  exports.getBoundingClientRect = function (el) {
    return function () {
      var rect = el.getBoundingClientRect();
      return {
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        width: rect.width,
        height: rect.height
      };
    };
  };
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var $foreign = $PS["Web.HTML.HTMLElement"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var toEventTarget = Unsafe_Coerce.unsafeCoerce;
  var toElement = Unsafe_Coerce.unsafeCoerce;
  var fromElement = function (x) {
      return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  exports["fromElement"] = fromElement;
  exports["toElement"] = toElement;
  exports["toEventTarget"] = toEventTarget;
  exports["getBoundingClientRect"] = $foreign.getBoundingClientRect;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["document"] = $foreign.document;
})(PS);
(function(exports) {
  "use strict";

  exports.code = function (e) {
    return e.code;
  };
})(PS["Web.UIEvent.KeyboardEvent"] = PS["Web.UIEvent.KeyboardEvent"] || {});
(function(exports) {
  "use strict";

  exports._unsafeReadProtoTagged = function (nothing, just, name, value) {
    if (typeof window !== "undefined") {
      var ty = window[name];
      if (ty != null && value instanceof ty) {
        return just(value);
      }
      return nothing;
    } 
    var obj = value;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name) {
        return just(value);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  };
})(PS["Web.Internal.FFI"] = PS["Web.Internal.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.Internal.FFI"] = $PS["Web.Internal.FFI"] || {};
  var exports = $PS["Web.Internal.FFI"];
  var $foreign = $PS["Web.Internal.FFI"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var unsafeReadProtoTagged = function (name) {
      return function (value) {
          return $foreign["_unsafeReadProtoTagged"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, name, value);
      };
  };
  exports["unsafeReadProtoTagged"] = unsafeReadProtoTagged;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.UIEvent.KeyboardEvent"] = $PS["Web.UIEvent.KeyboardEvent"] || {};
  var exports = $PS["Web.UIEvent.KeyboardEvent"];
  var $foreign = $PS["Web.UIEvent.KeyboardEvent"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];
  var toEvent = Unsafe_Coerce.unsafeCoerce;                                 
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("KeyboardEvent");
  exports["fromEvent"] = fromEvent;
  exports["toEvent"] = toEvent;
  exports["code"] = $foreign.code;
})(PS);
(function(exports) {
  "use strict";

  exports.clientX = function (e) {
    return e.clientX;
  };

  exports.clientY = function (e) {
    return e.clientY;
  };

  exports.pointerId = function (e) {
    return e.pointerId;
  }
})(PS["Web.UIEvent.PointerEvent"] = PS["Web.UIEvent.PointerEvent"] || {});
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Web.UIEvent.PointerEvent"] = $PS["Web.UIEvent.PointerEvent"] || {};
  var exports = $PS["Web.UIEvent.PointerEvent"];
  var $foreign = $PS["Web.UIEvent.PointerEvent"];
  var Web_Internal_FFI = $PS["Web.Internal.FFI"];                          
  var fromEvent = Web_Internal_FFI.unsafeReadProtoTagged("PointerEvent");
  exports["fromEvent"] = fromEvent;
  exports["clientX"] = $foreign.clientX;
  exports["clientY"] = $foreign.clientY;
  exports["pointerId"] = $foreign.pointerId;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Operator"] = $PS["Operator"] || {};
  var exports = $PS["Operator"];
  var Capture = $PS["Capture"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Promise = $PS["Effect.Promise"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Effect_Timer = $PS["Effect.Timer"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Gamepad = $PS["Gamepad"];
  var $$Math = $PS["Math"];
  var Peer = $PS["Peer"];
  var PeerConnection = $PS["PeerConnection"];
  var Playback = $PS["Playback"];
  var PointerEvents = $PS["PointerEvents"];
  var Signaling = $PS["Signaling"];
  var Util = $PS["Util"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_DOM_ParentNode = $PS["Web.DOM.ParentNode"];
  var Web_Event_Event = $PS["Web.Event.Event"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var Web_UIEvent_KeyboardEvent = $PS["Web.UIEvent.KeyboardEvent"];
  var Web_UIEvent_PointerEvent = $PS["Web.UIEvent.PointerEvent"];
  var JoystickCoordinates = (function () {
      function JoystickCoordinates(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      JoystickCoordinates.create = function (value0) {
          return function (value1) {
              return new JoystickCoordinates(value0, value1);
          };
      };
      return JoystickCoordinates;
  })();
  var sendMessage = function (v) {
      return function (message) {
          var sendMessage$prime = function (v1) {
              if (v1 instanceof Data_Either.Left) {
                  return Effect_Console.warn("Peer is not available");
              };
              if (v1 instanceof Data_Either.Right) {
                  return Peer.sendMessage(v1.value0.peer)(Data_Argonaut_Core.fromObject(Data_Functor.map(Foreign_Object.functorObject)(Data_Argonaut_Core.fromNumber)(message)));
              };
              throw new Error("Failed pattern match at Operator (line 160, column 5 - line 160, column 57): " + [ v1.constructor.name ]);
          };
          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(v))(sendMessage$prime);
      };
  };
  var initJoystickControl = function (up) {
      return function (down) {
          return function (left) {
              return function (right) {
                  return function (axisH) {
                      return function (axisV) {
                          return function (set) {
                              var setFromGamepad = Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                              var joystickCoordinatesFromEvent = function (joystick) {
                                  return function (event) {
                                      return function __do() {
                                          var rect = Web_HTML_HTMLElement.getBoundingClientRect(joystick)();
                                          var offsetY = Data_Int.toNumber(Web_UIEvent_PointerEvent.clientY(event)) - rect.top;
                                          var y = (150.0 - offsetY) / 100.0;
                                          var offsetX = Data_Int.toNumber(Web_UIEvent_PointerEvent.clientX(event)) - rect.left;
                                          var x = (offsetX - 150.0) / 100.0;
                                          return new JoystickCoordinates(x, y);
                                      };
                                  };
                              };
                              var onPointerDown = function (joystick) {
                                  return function (setByMouseRef) {
                                      return function (event) {
                                          return function __do() {
                                              var v = joystickCoordinatesFromEvent(joystick)(event)();
                                              return Control_Applicative.when(Effect.applicativeEffect)(v.value0 * v.value0 + v.value1 * v.value1 <= 2.1)(function __do() {
                                                  PointerEvents.setPointerCapture(Web_UIEvent_PointerEvent.pointerId(event))(Web_HTML_HTMLElement.toElement(joystick))();
                                                  set(new JoystickCoordinates(v.value0, v.value1))();
                                                  return Effect_Ref.write(true)(setByMouseRef)();
                                              })();
                                          };
                                      };
                                  };
                              };
                              var onPointerMove = function (joystick) {
                                  return function (setByMouseRef) {
                                      return function (event) {
                                          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(setByMouseRef))(Data_Function.flip(Control_Applicative.when(Effect.applicativeEffect))(Control_Bind.bind(Effect.bindEffect)(joystickCoordinatesFromEvent(joystick)(event))(set)));
                                      };
                                  };
                              };
                              var hasKeyboardInputs = function (keyboardState) {
                                  return Data_Set.member(Data_Ord.ordString)(up)(keyboardState) || (Data_Set.member(Data_Ord.ordString)(down)(keyboardState) || (Data_Set.member(Data_Ord.ordString)(left)(keyboardState) || Data_Set.member(Data_Ord.ordString)(right)(keyboardState)));
                              };
                              var setFromKeyboard = function (keyboardStateRef) {
                                  return function __do() {
                                      var keyboardState = Effect_Ref.read(keyboardStateRef)();
                                      var $43 = hasKeyboardInputs(keyboardState);
                                      if ($43) {
                                          var upDown = (function () {
                                              var $44 = Data_Set.member(Data_Ord.ordString)(up)(keyboardState);
                                              if ($44) {
                                                  return 1.0;
                                              };
                                              return 0.0;
                                          })();
                                          var rightDown = (function () {
                                              var $45 = Data_Set.member(Data_Ord.ordString)(right)(keyboardState);
                                              if ($45) {
                                                  return 1.0;
                                              };
                                              return 0.0;
                                          })();
                                          var leftDown = (function () {
                                              var $46 = Data_Set.member(Data_Ord.ordString)(left)(keyboardState);
                                              if ($46) {
                                                  return 1.0;
                                              };
                                              return 0.0;
                                          })();
                                          var x = rightDown - leftDown;
                                          var downDown = (function () {
                                              var $47 = Data_Set.member(Data_Ord.ordString)(down)(keyboardState);
                                              if ($47) {
                                                  return 1.0;
                                              };
                                              return 0.0;
                                          })();
                                          var y = upDown - downDown;
                                          return set(new JoystickCoordinates(x, y))();
                                      };
                                      return setFromGamepad();
                                  };
                              };
                              var onBlur = function (setByMouseRef) {
                                  return function (keyboardStateRef) {
                                      return function __do() {
                                          var keyboardState = Effect_Ref.read(keyboardStateRef)();
                                          var setByMouse = Effect_Ref.read(setByMouseRef)();
                                          Effect_Ref.write(Data_Set.empty)(keyboardStateRef)();
                                          return Control_Applicative.when(Effect.applicativeEffect)(hasKeyboardInputs(keyboardState) && !setByMouse)(setFromKeyboard(keyboardStateRef))();
                                      };
                                  };
                              };
                              var onKeyDown = function (setByMouseRef) {
                                  return function (keyboardStateRef) {
                                      return function (event) {
                                          var keyCode = Web_UIEvent_KeyboardEvent.code(event);
                                          return Control_Applicative.when(Effect.applicativeEffect)(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)(keyCode)([ up, down, left, right ]))(function __do() {
                                              Web_Event_Event.preventDefault(Web_UIEvent_KeyboardEvent.toEvent(event))();
                                              var keyboardState = Effect_Ref.read(keyboardStateRef)();
                                              return Control_Applicative.unless(Effect.applicativeEffect)(Data_Set.member(Data_Ord.ordString)(keyCode)(keyboardState))(function __do() {
                                                  Effect_Ref.write(Data_Set.insert(Data_Ord.ordString)(keyCode)(keyboardState))(keyboardStateRef)();
                                                  var setByMouse = Effect_Ref.read(setByMouseRef)();
                                                  return Control_Applicative.unless(Effect.applicativeEffect)(setByMouse)(setFromKeyboard(keyboardStateRef))();
                                              })();
                                          });
                                      };
                                  };
                              };
                              var onKeyUp = function (setByMouseRef) {
                                  return function (keyboardStateRef) {
                                      return function (event) {
                                          var keyCode = Web_UIEvent_KeyboardEvent.code(event);
                                          return Control_Applicative.when(Effect.applicativeEffect)(Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)(keyCode)([ up, down, left, right ]))(function __do() {
                                              Web_Event_Event.preventDefault(Web_UIEvent_KeyboardEvent.toEvent(event))();
                                              var keyboardState = Effect_Ref.read(keyboardStateRef)();
                                              return Control_Applicative.when(Effect.applicativeEffect)(Data_Set.member(Data_Ord.ordString)(keyCode)(keyboardState))(function __do() {
                                                  Effect_Ref.write(Data_Set["delete"](Data_Ord.ordString)(keyCode)(keyboardState))(keyboardStateRef)();
                                                  var setByMouse = Effect_Ref.read(setByMouseRef)();
                                                  return Control_Applicative.unless(Effect.applicativeEffect)(setByMouse)(setFromKeyboard(keyboardStateRef))();
                                              })();
                                          });
                                      };
                                  };
                              };
                              var resetMouseInput = function (setByMouseRef) {
                                  return function (keyboardStateRef) {
                                      return function __do() {
                                          Effect_Ref.write(false)(setByMouseRef)();
                                          return setFromKeyboard(keyboardStateRef)();
                                      };
                                  };
                              };
                              var onPointerUp = function (joystick) {
                                  return function (setByMouseRef) {
                                      return function (keyboardStateRef) {
                                          return function (event) {
                                              return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(setByMouseRef))(Data_Function.flip(Control_Applicative.when(Effect.applicativeEffect))(resetMouseInput(setByMouseRef)(keyboardStateRef)));
                                          };
                                      };
                                  };
                              };
                              var addPointerEventListener = function (eventName) {
                                  return function (handler) {
                                      return function (target) {
                                          return function __do() {
                                              var listener = Web_Event_EventTarget.eventListener(function ($80) {
                                                  return handler((function (x) {
                                                      return function (dictPartial) {
                                                          return Data_Maybe.fromJust()(x);
                                                      };
                                                  })(Web_UIEvent_PointerEvent.fromEvent($80))());
                                              })();
                                              return Web_Event_EventTarget.addEventListener(eventName)(listener)(false)(Web_HTML_HTMLElement.toEventTarget(target))();
                                          };
                                      };
                                  };
                              };
                              var addKeyboardEventListener = function (eventName) {
                                  return function (handler) {
                                      return function (document) {
                                          return function __do() {
                                              var listener = Web_Event_EventTarget.eventListener(function ($81) {
                                                  return handler((function (x) {
                                                      return function (dictPartial) {
                                                          return Data_Maybe.fromJust()(x);
                                                      };
                                                  })(Web_UIEvent_KeyboardEvent.fromEvent($81))());
                                              })();
                                              return Web_Event_EventTarget.addEventListener(eventName)(listener)(false)(Web_HTML_HTMLDocument.toEventTarget(document))();
                                          };
                                      };
                                  };
                              };
                              return function __do() {
                                  var document = Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document)();
                                  var joystick = Data_Functor.map(Effect.functorEffect)(function ($82) {
                                      return (function (x) {
                                          return function (dictPartial) {
                                              return Data_Maybe.fromJust()(x);
                                          };
                                      })((function (v) {
                                          return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(Web_HTML_HTMLElement.fromElement);
                                      })($82))();
                                  })(Web_DOM_ParentNode.querySelector("#joystick-position")(Web_HTML_HTMLDocument.toParentNode(document)))();
                                  var setByMouseRef = Effect_Ref["new"](false)();
                                  var keyboardStateRef = Effect_Ref["new"](Data_Set.empty)();
                                  addPointerEventListener("pointerdown")(onPointerDown(joystick)(setByMouseRef))(joystick)();
                                  addPointerEventListener("pointermove")(onPointerMove(joystick)(setByMouseRef))(joystick)();
                                  addPointerEventListener("pointerup")(onPointerUp(joystick)(setByMouseRef)(keyboardStateRef))(joystick)();
                                  addKeyboardEventListener("keydown")(onKeyDown(setByMouseRef)(keyboardStateRef))(document)();
                                  addKeyboardEventListener("keyup")(onKeyUp(setByMouseRef)(keyboardStateRef))(document)();
                                  return Data_Unit.unit;
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var initJoystick = function (getControl$prime) {
      var setY = getControl$prime("joystickV");
      var setX = getControl$prime("joystickH");
      var set = function (joystickElement) {
          return function (zeroTimeoutRef) {
              return function (v) {
                  var distance = v.value0 * v.value0 + v.value1 * v.value1;
                  var v1 = (function () {
                      var $51 = distance < 0.1;
                      if ($51) {
                          return new JoystickCoordinates(0.0, 0.0);
                      };
                      var $52 = distance > 1.0;
                      if ($52) {
                          var angle = $$Math.atan2(v.value1)(v.value0);
                          return new JoystickCoordinates($$Math.cos(angle), $$Math.sin(angle));
                      };
                      return v;
                  })();
                  var canvasY = 150.0 - v1.value1 * 100.0;
                  var canvasX = v1.value0 * 100.0 + 150.0;
                  return function __do() {
                      Web_DOM_Element.setAttribute("cx")(Data_Show.show(Data_Show.showNumber)(canvasX))(joystickElement)();
                      Web_DOM_Element.setAttribute("cy")(Data_Show.show(Data_Show.showNumber)(canvasY))(joystickElement)();
                      setX(new Data_Maybe.Just(v1.value0))();
                      setY(new Data_Maybe.Just(v1.value1))();
                      var oldTimeoutId = Effect_Ref.read(zeroTimeoutRef)();
                      Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))(Effect_Timer.clearTimeout)(oldTimeoutId)();
                      var timeoutId = Effect_Timer.setTimeout(1000)(function __do() {
                          setX(Data_Maybe.Nothing.value)();
                          return setY(Data_Maybe.Nothing.value)();
                      })();
                      return Effect_Ref.write(new Data_Maybe.Just(timeoutId))(zeroTimeoutRef)();
                  };
              };
          };
      };
      return function __do() {
          var document = Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document)();
          var joystickElement = Data_Functor.map(Effect.functorEffect)(function ($83) {
              return (function (x) {
                  return function (dictPartial) {
                      return Data_Maybe.fromJust()(x);
                  };
              })($83)();
          })(Web_DOM_ParentNode.querySelector("#joystick-position")(Web_HTML_HTMLDocument.toParentNode(document)))();
          var zeroTimeoutRef = Effect_Ref["new"](Data_Maybe.Nothing.value)();
          return set(joystickElement)(zeroTimeoutRef);
      };
  };
  var initControls = function (sendMessage$prime) {
      var sendControls = function (timeoutRef) {
          return function (nextCommandRef) {
              return function __do() {
                  var timer = Effect_Ref.read(timeoutRef)();
                  (function () {
                      if (timer instanceof Data_Maybe.Just) {
                          Effect_Timer.clearTimeout(timer.value0)();
                          return Effect_Ref.write(Data_Maybe.Nothing.value)(timeoutRef)();
                      };
                      if (timer instanceof Data_Maybe.Nothing) {
                          return Data_Unit.unit;
                      };
                      throw new Error("Failed pattern match at Operator (line 135, column 7 - line 139, column 29): " + [ timer.constructor.name ]);
                  })();
                  var nextCommand = Effect_Ref.read(nextCommandRef)();
                  return Control_Applicative.unless(Effect.applicativeEffect)(Foreign_Object.isEmpty(nextCommand))(function __do() {
                      sendMessage$prime(nextCommand)();
                      var timeoutId = Effect_Timer.setTimeout(400)(sendControls(timeoutRef)(nextCommandRef))();
                      return Effect_Ref.write(new Data_Maybe.Just(timeoutId))(timeoutRef)();
                  })();
              };
          };
      };
      var setControl = function (v) {
          return function (nextCommandRef) {
              return function (v1) {
                  return function (control) {
                      return function (v2) {
                          if (v2 instanceof Data_Maybe.Just) {
                              return function __do() {
                                  Effect_Ref.modify_(Foreign_Object.insert(control)(v2.value0))(nextCommandRef)();
                                  var needsSend = Effect_Ref.read(v1)();
                                  return Control_Applicative.unless(Effect.applicativeEffect)(needsSend)(function __do() {
                                      Effect_Ref.write(true)(v1)();
                                      return Util.nextTick(function __do() {
                                          Effect_Ref.write(false)(v1)();
                                          return sendControls(v)(nextCommandRef)();
                                      })();
                                  })();
                              };
                          };
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Effect_Ref.modify_(Foreign_Object["delete"](control))(nextCommandRef);
                          };
                          throw new Error("Failed pattern match at Operator (line 145, column 5 - line 152, column 49): " + [ v.constructor.name, nextCommandRef.constructor.name, v1.constructor.name, control.constructor.name, v2.constructor.name ]);
                      };
                  };
              };
          };
      };
      return function __do() {
          var timeoutRef = Effect_Ref["new"](Data_Maybe.Nothing.value)();
          var nextCommandRef = Effect_Ref["new"](Foreign_Object.empty)();
          var needsSendRef = Effect_Ref["new"](false)();
          return setControl(timeoutRef)(nextCommandRef)(needsSendRef);
      };
  };
  var initConnection = function (localPeer) {
      return function (remotePeer) {
          var subscribeVideo = function (subscriber) {
              return function __do() {
                  Effect_Console.warn("Operator should not subscribe to video")();
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
              };
          };
          return function __do() {
              var pc = PeerConnection.createPeerConnection(Data_Maybe.Nothing.value)(Signaling.sendSdp(localPeer)(remotePeer))(Signaling.sendIce(localPeer)(remotePeer))(Signaling.subscribeSdp(remotePeer)(localPeer))(Signaling.subscribeIce(remotePeer)(localPeer))();
              return Peer.createPeer(pc)(Playback.setPlaybackVideo)(Playback.setPlaybackAudio)(subscribeVideo)(Capture.subscribeAudio)();
          };
      };
  };
  var waitForPeer = function (localPeer) {
      return function (dictDeferred) {
          var onPeer = function (v) {
              return function (v1) {
                  return function (v2) {
                      return function (v3) {
                          if (v2 instanceof Signaling.Tank) {
                              return function __do() {
                                  Control_Bind.join(Effect.bindEffect)(Effect_Ref.read(v))();
                                  var peer = initConnection(localPeer)(v3)();
                                  return v1(peer)();
                              };
                          };
                          if (v2 instanceof Signaling.Operator) {
                              return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                          };
                          throw new Error("Failed pattern match at Operator (line 99, column 5 - line 99, column 98): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name, v3.constructor.name ]);
                      };
                  };
              };
          };
          var callback = function (resolve) {
              return function (v) {
                  return function __do() {
                      var unsubscribe = Effect_Ref["new"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))();
                      var unsubscribeFn = Signaling.subscribePeer(Signaling.Operator.value)(localPeer)(onPeer(unsubscribe)(resolve))();
                      return Effect_Ref.write(unsubscribeFn)(unsubscribe)();
                  };
              };
          };
          return Effect_Promise.promise()(callback);
      };
  };
  var initPendingPeer = (function () {
      var addSubscriber = function (peer) {
          return function (id) {
              return function (requestSubscribers) {
                  return function (requestCallback) {
                      return function __do() {
                          var unsubscribe = Peer.subscribeRequest(peer)(requestCallback)();
                          return Data_Map_Internal.insert(Data_Ord.ordInt)(id)(unsubscribe)(requestSubscribers);
                      };
                  };
              };
          };
      };
      var handlePendingPeer = function (peer) {
          return function (v) {
              if (v instanceof Data_Either.Left) {
                  return function __do() {
                      Peer.setSendAudio(peer)(v.value0.sendAudio)();
                      return Data_FoldableWithIndex.foldWithIndexM(Data_Map_Internal.foldableWithIndexMap)(Effect.monadEffect)(addSubscriber(peer))(Data_Map_Internal.empty)(v.value0.requestSubscribers)();
                  };
              };
              if (v instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Effect.applicativeEffect)(Data_Map_Internal.empty);
              };
              throw new Error("Failed pattern match at Operator (line 83, column 5 - line 85, column 83): " + [ peer.constructor.name, v.constructor.name ]);
          };
      };
      var onPeer = function (v) {
          return function (peer) {
              return function __do() {
                  var pendingPeer = Effect_Ref.read(v)();
                  var requestSubscribers = handlePendingPeer(peer)(pendingPeer)();
                  Effect_Ref.write(new Data_Either.Right({
                      peer: peer,
                      requestSubscribers: requestSubscribers
                  }))(v)();
                  return Data_Unit.unit;
              };
          };
      };
      return function __do() {
          var pendingPeer = Effect_Ref["new"](new Data_Either.Left({
              requestSubscribers: Data_Map_Internal.empty,
              sendAudio: false,
              subscriberId: 0
          }))();
          Effect_Promise.runPromise(onPeer(pendingPeer))(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))(function (dictDeferred) {
              return waitForPeer(Signaling.peerId(Signaling.Operator.value))();
          })();
          return pendingPeer;
      };
  })();
  var main = function __do() {
      var peer = initPendingPeer();
      var setControl = initControls(sendMessage(peer))();
      var setJoystick = initJoystick(setControl)();
      initJoystickControl("ArrowUp")("ArrowDown")("ArrowLeft")("ArrowRight")(Gamepad.LeftAxisH.value)(Gamepad.LeftAxisV.value)(setJoystick)();
      return Data_Unit.unit;
  };
  exports["main"] = main;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.6
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Operator = $PS["Operator"];                
  var main = Operator.main;
  exports["main"] = main;
})(PS);
PS["Main"].main();